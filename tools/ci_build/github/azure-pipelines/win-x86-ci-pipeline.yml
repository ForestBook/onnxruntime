parameters:
  runDebugBuild: 'false'
  agentPool : 'Win-CPU'

jobs:
- job: Windows_CI_Dev_x86
  pool: ${{ parameters.agentPool }}
  variables:
    buildDirectory: '$(Build.BinariesDirectory)'
    PlatformTarget: x86
    RuntimeIdentifier: win-x86
    DotNetExe: '"c:\program files (x86)\dotnet\dotnet.exe"'
    buildCommand: '$(Build.SourcesDirectory)\tools\ci_build\build.py --build_dir $(Build.BinariesDirectory) --skip_submodule_sync --cmake_path $(Build.BinariesDirectory)\cmake\bin\cmake.exe --ctest_path $(Build.BinariesDirectory)\cmake\bin\ctest.exe --use_openmp --build_shared_lib  --build_csharp --enable_onnx_tests --test_data_url $(TestDataUrl) --test_data_checksum $(TestDataChecksum) --x86'
  steps:
    - template: templates/set-test-data-variables-step.yml
    - template: templates/windows-build-tools-setup-steps.yml
      parameters:
        EnvSetupScript: 'setup_env.bat'
        buildArch: 'x86'
        setVcvars: false

    - task: CmdLine@1
      displayName: 'Download test data and generate cmake config'
      inputs:
        filename: '$(Build.BinariesDirectory)\packages\python\python.exe'
        arguments: '$(buildCommand) --update --config RelWithDebInfo'
        workingDirectory: "$(Build.BinariesDirectory)"

    - ${{ if eq(parameters['runDebugBuild'], 'true') }}:
      - task: VSBuild@1
        displayName: 'Build Debug'
        inputs:
          solution: '$(Build.BinariesDirectory)\Debug\onnxruntime.sln'
          platform: 'Win32'
          configuration: 'Debug'
          msbuildArguments: '/m /p:PlatformTarget=x86'
          msbuildArchitecture: 'x86'
          logProjectEvents: true
          workingFolder: '$(Build.BinariesDirectory)\Debug'

      - task: BatchScript@1
        displayName: 'Test Debug'
        inputs:
          filename: '$(Build.BinariesDirectory)\packages\python\python.exe'
          arguments: '$(buildCommand) --test --config Debug'
          workingFolder: '$(Build.BinariesDirectory)'

      - task: VSBuild@1
        displayName: 'Build C# Debug'
        inputs:
          solution: '$(Build.SourcesDirectory)\csharp\OnnxRuntime.CSharp.sln'
          platform: 'any cpu'
          configuration: 'Debug'
          restoreNugetPackages: false
          msbuildArchitecture: 'x86'
          workingFolder: '$(Build.SourcesDirectory)\csharp'
          msbuildArguments: '/m /p:OnnxRuntimeBuildDirectory=$(Build.BinariesDirectory)'

      - task: VSTest@2
        displayName: 'VsTest - C# Debug'
        inputs:
          testAssemblyVer2: '**\bin\Debug\**\*Tests.dll'
          searchFolder: '$(Build.SourcesDirectory)\csharp\test'
          runInParallel: true
          configuration: Debug
          platform: x86

    - script: echo ##vso[task.setvariable variable=Configuration]RelWithDebInfo

    - task: CmdLine@2
      displayName: 'Display variables'
      inputs:
        script: |
         set 

    - task: VSBuild@1
      displayName: 'Build RelWithDebInfo'
      inputs:
        solution: '$(Build.BinariesDirectory)\RelWithDebInfo\onnxruntime.sln'
        platform: 'Win32'
        configuration: 'RelWithDebInfo'
        msbuildArguments: '/m /p:PlatformTarget=x86'
        msbuildArchitecture: 'x86'
        logProjectEvents: true
        workingFolder: '$(Build.BinariesDirectory)\RelWithDebInfo'

    - task: BatchScript@1
      displayName: 'Test RelWithDebInfo'
      inputs:
        filename: '$(Build.BinariesDirectory)\packages\python\python.exe'
        arguments: '$(buildCommand) --test --config RelWithDebInfo'
        workingFolder: "$(Build.BinariesDirectory)"

    - task: VSBuild@1
      displayName: 'Build C# RelWithDebInfo'
      inputs:
        solution: '$(Build.SourcesDirectory)\csharp\OnnxRuntime.CSharp.sln'
        platform: 'any cpu'
        configuration: 'RelWithDebInfo'
        msbuildArchitecture: 'x86'
        restoreNugetPackages: false
        workingFolder: '$(Build.SourcesDirectory)\csharp'
        msbuildArguments: '/m /p:OnnxRuntimeBuildDirectory=$(Build.BinariesDirectory)'

    - task: CmdLine@2
      displayName: 'DotNet VStest C# tests'
      inputs:
        script: |
         FOR /F  %f IN ('dir /s /b \*Tests.dll') DO %dotnetexe% vstest %f 
        workingDirectory: '$(Build.SourcesDirectory)\csharp'

    - task: PublishTestResults@2
      displayName: 'Publish unit test results'
      inputs:
        testResultsFiles: '**\*.results.xml'
        searchFolder: '$(Build.BinariesDirectory)'
        testRunTitle: 'Unit Test Run'
      condition: succeededOrFailed()

    - script: |
       msbuild $(Build.SourcesDirectory)\csharp\OnnxRuntime.CSharp.proj /p:Configuration=$(buildConfig) /p:TargetArchitecture=x86 /t:CreatePackage
       cd $(Build.SourcesDirectory)\csharp\src\Microsoft.ML.OnnxRuntime\bin\$(buildConfig)\
       ren *.nupkg win-x86.zip
       copy $(Build.SourcesDirectory)\csharp\src\Microsoft.ML.OnnxRuntime\bin\RelWithDebInfo\*zip $(Build.ArtifactStagingDirectory)
      workingDirectory: '$(Build.SourcesDirectory)\csharp'
      displayName: 'Create NuGet Package'
      env:
        OnnxRuntimeBuildDirectory: $(Build.BinariesDirectory) 

    - task: PublishPipelineArtifact@0
      displayName: 'Publish Pipeline Artifact: drop win x86 zip'
      inputs:
        artifactName: 'drop-win-x86-zip'
        targetPath: '$(Build.ArtifactStagingDirectory)'

    - task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0
      displayName: 'Component Detection'
      condition: succeeded()

    - template: templates/clean-agent-build-directory-step.yml
