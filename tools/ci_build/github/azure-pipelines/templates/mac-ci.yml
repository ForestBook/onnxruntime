parameters:
  AgentPool : 'macOS-10.13'
  DoNugetPack: 'false'
  JobName: 'MacOS_CI_Dev'

jobs:
- job: ${{ parameters.JobName }}
  pool:
    vmImage: ${{ parameters.AgentPool }}
  steps:
    - template: mac-set-variables-and-download.yml
    - script: |
        sudo python3 -m pip install numpy==1.15.0
        sudo xcode-select --switch /Applications/Xcode_10.app/Contents/Developer
        python3 $(Build.SourcesDirectory)/tools/ci_build/build.py --use_openmp --build_dir $(Build.BinariesDirectory) --build_wheel --skip_submodule_sync --parallel --build_shared_lib --enable_onnx_tests --config Debug RelWithDebInfo
      displayName: 'Build and Test OnnxRuntime lib for MacOS'
    - ${{ if eq(parameters['DoNugetPack'], 'true') }}:
      - script: |
         set -e -x 
         mkdir $(Build.BinariesDirectory)/osx-x64
         find $(Build.BinariesDirectory)
         cp $(Build.BinariesDirectory)/RelWithDebInfo/libonnxruntime.dylib $(Build.BinariesDirectory)/osx-x64/
         dsymutil $(Build.BinariesDirectory)/osx-x64/libonnxruntime.dylib -o $(Build.BinariesDirectory)/osx-x64/libonnxruntime.dylib.dSYM
         strip -S -x $(Build.BinariesDirectory)/osx-x64/libonnxruntime.dylib
         find $(Build.BinariesDirectory)/osx-x64
         cwd=`pwd`
         cd $(Build.BinariesDirectory)
         zip -r osx-x64.zip osx-x64
         cp $(Build.BinariesDirectory)/osx-x64.zip $(Build.ArtifactStagingDirectory)       
         cd $cwd
        displayName: 'Copy MacOS libs to Artifact Staging'
      - task: PublishPipelineArtifact@0
        displayName: 'Publish Pipeline Artifact'
        inputs:
          artifactName: 'drop-osx'
          targetPath: '$(Build.ArtifactStagingDirectory)'
    - task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0
      displayName: 'Component Detection'
      condition: succeeded()
    - template: clean-agent-build-directory-step.yml
