jobs:
- job: NuGet_Test_Win
  pool: Win-CPU
  dependsOn:
  - NuGet_Packaging
  condition: succeeded()
  steps:
  - script: |
     IF EXIST $(buildDirectory)\Debug rmdir /s /q $(buildDirectory)\Debug
     IF EXIST $(buildDirectory)\Release rmdir /s /q $(buildDirectory)\Release
     IF EXIST $(buildDirectory)\RelWithDebInfo rmdir /s /q $(buildDirectory)\RelWithDebInfo
    displayName: 'Clean up stale files if any'

  - task: ms-vscs-artifact.build-tasks.artifactDropDownloadTask-1.artifactDropDownloadTask@0
    displayName: 'Download cmake'
    inputs:
      dropServiceURI: 'https://aiinfra.artifacts.visualstudio.com/DefaultCollection'
      buildNumber: cmake/x64/3.13.4
      destinationPath: '$(Build.BinariesDirectory)\packages\cmake'
    timeoutInMinutes: 10

  - task: ms-vscs-artifact.build-tasks.artifactDropDownloadTask-1.artifactDropDownloadTask@0
    displayName: 'Download python installer from Artifact Services Drop'
    inputs:
      dropServiceURI: 'https://aiinfra.artifacts.visualstudio.com/DefaultCollection'
      buildNumber: miniconda3/4.4.10/x64
      destinationPath: '$(Build.BinariesDirectory)\installer\python'

  - task: CmdLine@1
    displayName: 'Run python installer'
    inputs:
      filename: '$(Build.BinariesDirectory)\installer\python\installer.exe'
      arguments: '/S /NoRegistry=1 /AddToPath=0 /RegisterPython=0 /D=$(Build.BinariesDirectory)\packages\python'
    timeoutInMinutes: 10

  - task: BatchScript@1
    displayName: 'Setup VS2017 env vars'
    inputs:
      filename: 'C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Auxiliary\Build\vcvars64.bat'
      modifyEnvironment: true

  - task: DownloadPipelineArtifact@0
    displayName: 'Download Pipeline Artifact'
    inputs:
      artifactName: 'drop-signed-nuget'
      targetPath: '$(Build.BinariesDirectory)/nuget-artifact'

  - script: |
     @echo "Running build.py --update"
     $(Build.BinariesDirectory)\packages\python\python.exe $(Build.SourcesDirectory)\tools\ci_build\build.py --build_dir $(buildDirectory) --config $(buildConfig) --cmake_path $(Build.BinariesDirectory)\packages\cmake\bin\cmake.exe  --ctest_path $(Build.BinariesDirectory)\packages\cmake\bin\ctest.exe --update --download_test_data  --test_data_url $(TestDataUrl) --test_data_checksum $(TestDataChecksum)

    displayName: 'Download Test Data'
    continueOnError: true
    env:
      IsReleaseBuild: $(IsReleaseBuild)

  - script: |
     @echo "Running Runtest.bat"
     test\Microsoft.ML.OnnxRuntime.EndToEndTests\runtest.bat $(Build.BinariesDirectory)\nuget-artifact
    workingDirectory: '$(Build.SourcesDirectory)\csharp'
    displayName: 'Run End to End Test (C#) .Net Core'
    env:
      IsReleaseBuild: $(IsReleaseBuild)
      OnnxRuntimeBuildDirectory: $(buildDirectory)

  - script: |
     @echo "Running Runtest.bat"
     test\Microsoft.ML.OnnxRuntime.EndToEndTests\runtest.bat $(Build.BinariesDirectory)\nuget-artifact netcoreapp2.1 x86
    workingDirectory: '$(Build.SourcesDirectory)\csharp'
    displayName: 'Run End to End Test (C#) .Net Core x86'
    enabled: false
    env:
      IsReleaseBuild: $(IsReleaseBuild)
      OnnxRuntimeBuildDirectory: $(buildDirectory)

  - script: |
     @echo "Running Runtest.bat"
     test\Microsoft.ML.OnnxRuntime.EndToEndTests\runtest.bat $(Build.BinariesDirectory)\nuget-artifact net461
    workingDirectory: '$(Build.SourcesDirectory)\csharp'
    displayName: 'Run End to End Test (C#) .NetFramework'
    env:
      IsReleaseBuild: $(IsReleaseBuild)
      OnnxRuntimeBuildDirectory: $(buildDirectory)

  - script: |
     @echo "Running Runtest.bat"
     test\Microsoft.ML.OnnxRuntime.EndToEndTests\runtest.bat $(Build.BinariesDirectory)\nuget-artifact net461 x86
    workingDirectory: '$(Build.SourcesDirectory)\csharp'
    displayName: 'Run End to End Test (C#) .NetFramework x86'
    enabled: false
    env:
      IsReleaseBuild: $(IsReleaseBuild)
      OnnxRuntimeBuildDirectory: $(buildDirectory)

  - script: |
     @echo "Running runtest.bat"
     test\Microsoft.ML.OnnxRuntime.EndToEndTests.Capi\runtest.bat $(Build.BinariesDirectory)\nuget-artifact
     REM Need an ErrorLevel check, since the script uses Exit /B
     IF NOT %ERRORLEVEL% EQU 0 {
         EXIT 1
     }
    workingDirectory: '$(Build.SourcesDirectory)\csharp'
    displayName: 'Run End to End Test (C++) '
    timeoutInMinutes: 30
    env:
      IsReleaseBuild: $(IsReleaseBuild)
      OnnxRuntimeBuildDirectory: $(buildDirectory)

  - task: mspremier.PostBuildCleanup.PostBuildCleanup-task.PostBuildCleanup@3
    displayName: 'Clean Agent Directories'
    condition: always()

